app.delete('/api/notes/:id', (req, res) => {
  const noteId = req.params.id;
  
  fs.readFile(path.join(__dirname, 'db/db.json'), 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      res.status(500).json({ error: 'Failed to read notes data' });
      return;
    }

    const notes = JSON.parse(data);
    const updatedNotes = notes.filter((note) => note.id !== noteId);

    fs.writeFile(path.join(__dirname, 'db/db.json'), JSON.stringify(updatedNotes), 'utf8', (err) => {
      if (err) {
        console.error(err);
        res.status(500).json({ error: 'Failed to delete note' });
        return;
      }
      res.sendStatus(204);
    });
  });
});

function generateUniqueID() {
  return Date.now().toString();
}

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
})